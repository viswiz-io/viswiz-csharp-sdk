/* 
 * VisWiz.io API Documentation
 *
 * This SDK allows you to query and create new projects, builds or images within the VisWiz service. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VisWiz.SDK.Client;
using VisWiz.SDK.Model;

namespace VisWiz.SDK.Client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IImagesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create an image
        /// </summary>
        /// <remarks>
        /// Upload a new image for a build. This endpoint accepts only one PNG image per request.  This request requires a &#x60;Content-Type: multipart/form-data&#x60; HTTP header. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <param name="name">The name of the image</param>
        /// <param name="image">The contents of the image</param>
        /// <returns>Image</returns>
        Image CreateImage (string buildID, string name, System.IO.Stream image);

        /// <summary>
        /// Create an image
        /// </summary>
        /// <remarks>
        /// Upload a new image for a build. This endpoint accepts only one PNG image per request.  This request requires a &#x60;Content-Type: multipart/form-data&#x60; HTTP header. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <param name="name">The name of the image</param>
        /// <param name="image">The contents of the image</param>
        /// <returns>ApiResponse of Image</returns>
        ApiResponse<Image> CreateImageWithHttpInfo (string buildID, string name, System.IO.Stream image);
        /// <summary>
        /// Get images for a build
        /// </summary>
        /// <remarks>
        /// Get a list of all images for a build. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Images</returns>
        Images GetImages (string buildID);

        /// <summary>
        /// Get images for a build
        /// </summary>
        /// <remarks>
        /// Get a list of all images for a build. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>ApiResponse of Images</returns>
        ApiResponse<Images> GetImagesWithHttpInfo (string buildID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create an image
        /// </summary>
        /// <remarks>
        /// Upload a new image for a build. This endpoint accepts only one PNG image per request.  This request requires a &#x60;Content-Type: multipart/form-data&#x60; HTTP header. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <param name="name">The name of the image</param>
        /// <param name="image">The contents of the image</param>
        /// <returns>Task of Image</returns>
        System.Threading.Tasks.Task<Image> CreateImageAsync (string buildID, string name, System.IO.Stream image);

        /// <summary>
        /// Create an image
        /// </summary>
        /// <remarks>
        /// Upload a new image for a build. This endpoint accepts only one PNG image per request.  This request requires a &#x60;Content-Type: multipart/form-data&#x60; HTTP header. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <param name="name">The name of the image</param>
        /// <param name="image">The contents of the image</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        System.Threading.Tasks.Task<ApiResponse<Image>> CreateImageAsyncWithHttpInfo (string buildID, string name, System.IO.Stream image);
        /// <summary>
        /// Get images for a build
        /// </summary>
        /// <remarks>
        /// Get a list of all images for a build. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of Images</returns>
        System.Threading.Tasks.Task<Images> GetImagesAsync (string buildID);

        /// <summary>
        /// Get images for a build
        /// </summary>
        /// <remarks>
        /// Get a list of all images for a build. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of ApiResponse (Images)</returns>
        System.Threading.Tasks.Task<ApiResponse<Images>> GetImagesAsyncWithHttpInfo (string buildID);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ImagesApi : IImagesApi
    {
        private VisWiz.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ImagesApi(String basePath)
        {
            this.Configuration = new VisWiz.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = VisWiz.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ImagesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ImagesApi(VisWiz.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = VisWiz.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VisWiz.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VisWiz.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VisWiz.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create an image Upload a new image for a build. This endpoint accepts only one PNG image per request.  This request requires a &#x60;Content-Type: multipart/form-data&#x60; HTTP header. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <param name="name">The name of the image</param>
        /// <param name="image">The contents of the image</param>
        /// <returns>Image</returns>
        public Image CreateImage (string buildID, string name, System.IO.Stream image)
        {
             ApiResponse<Image> localVarResponse = CreateImageWithHttpInfo(buildID, name, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an image Upload a new image for a build. This endpoint accepts only one PNG image per request.  This request requires a &#x60;Content-Type: multipart/form-data&#x60; HTTP header. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <param name="name">The name of the image</param>
        /// <param name="image">The contents of the image</param>
        /// <returns>ApiResponse of Image</returns>
        public ApiResponse< Image > CreateImageWithHttpInfo (string buildID, string name, System.IO.Stream image)
        {
            // verify the required parameter 'buildID' is set
            if (buildID == null)
                throw new ApiException(400, "Missing required parameter 'buildID' when calling ImagesApi->CreateImage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImagesApi->CreateImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling ImagesApi->CreateImage");

            var localVarPath = "/builds/{buildID}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildID != null) localVarPathParams.Add("buildID", this.Configuration.ApiClient.ParameterToString(buildID)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Image) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
        }

        /// <summary>
        /// Create an image Upload a new image for a build. This endpoint accepts only one PNG image per request.  This request requires a &#x60;Content-Type: multipart/form-data&#x60; HTTP header. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <param name="name">The name of the image</param>
        /// <param name="image">The contents of the image</param>
        /// <returns>Task of Image</returns>
        public async System.Threading.Tasks.Task<Image> CreateImageAsync (string buildID, string name, System.IO.Stream image)
        {
             ApiResponse<Image> localVarResponse = await CreateImageAsyncWithHttpInfo(buildID, name, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an image Upload a new image for a build. This endpoint accepts only one PNG image per request.  This request requires a &#x60;Content-Type: multipart/form-data&#x60; HTTP header. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <param name="name">The name of the image</param>
        /// <param name="image">The contents of the image</param>
        /// <returns>Task of ApiResponse (Image)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Image>> CreateImageAsyncWithHttpInfo (string buildID, string name, System.IO.Stream image)
        {
            // verify the required parameter 'buildID' is set
            if (buildID == null)
                throw new ApiException(400, "Missing required parameter 'buildID' when calling ImagesApi->CreateImage");
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling ImagesApi->CreateImage");
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling ImagesApi->CreateImage");

            var localVarPath = "/builds/{buildID}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildID != null) localVarPathParams.Add("buildID", this.Configuration.ApiClient.ParameterToString(buildID)); // path parameter
            if (name != null) localVarFormParams.Add("name", this.Configuration.ApiClient.ParameterToString(name)); // form parameter
            if (image != null) localVarFileParams.Add("image", this.Configuration.ApiClient.ParameterToFile("image", image));

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Image>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Image) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Image)));
        }

        /// <summary>
        /// Get images for a build Get a list of all images for a build. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Images</returns>
        public Images GetImages (string buildID)
        {
             ApiResponse<Images> localVarResponse = GetImagesWithHttpInfo(buildID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get images for a build Get a list of all images for a build. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>ApiResponse of Images</returns>
        public ApiResponse< Images > GetImagesWithHttpInfo (string buildID)
        {
            // verify the required parameter 'buildID' is set
            if (buildID == null)
                throw new ApiException(400, "Missing required parameter 'buildID' when calling ImagesApi->GetImages");

            var localVarPath = "/builds/{buildID}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildID != null) localVarPathParams.Add("buildID", this.Configuration.ApiClient.ParameterToString(buildID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Images>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Images) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Images)));
        }

        /// <summary>
        /// Get images for a build Get a list of all images for a build. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of Images</returns>
        public async System.Threading.Tasks.Task<Images> GetImagesAsync (string buildID)
        {
             ApiResponse<Images> localVarResponse = await GetImagesAsyncWithHttpInfo(buildID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get images for a build Get a list of all images for a build. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of ApiResponse (Images)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Images>> GetImagesAsyncWithHttpInfo (string buildID)
        {
            // verify the required parameter 'buildID' is set
            if (buildID == null)
                throw new ApiException(400, "Missing required parameter 'buildID' when calling ImagesApi->GetImages");

            var localVarPath = "/builds/{buildID}/images";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildID != null) localVarPathParams.Add("buildID", this.Configuration.ApiClient.ParameterToString(buildID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetImages", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Images>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Images) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Images)));
        }

    }
}
