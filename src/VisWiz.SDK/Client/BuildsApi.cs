/* 
 * VisWiz.io API Documentation
 *
 * This SDK allows you to query and create new projects, builds or images within the VisWiz service. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VisWiz.SDK.Client;
using VisWiz.SDK.Model;

namespace VisWiz.SDK.Client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBuildsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a build
        /// </summary>
        /// <remarks>
        /// Create a new build for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Build</returns>
        Build CreateBuild (string projectID, Body2 body);

        /// <summary>
        /// Create a build
        /// </summary>
        /// <remarks>
        /// Create a new build for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Build</returns>
        ApiResponse<Build> CreateBuildWithHttpInfo (string projectID, Body2 body);
        /// <summary>
        /// Finish a build
        /// </summary>
        /// <remarks>
        /// Finish a build when all images have been created. This triggers the actual build comparison to execute. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns></returns>
        void FinishBuild (string buildID);

        /// <summary>
        /// Finish a build
        /// </summary>
        /// <remarks>
        /// Finish a build when all images have been created. This triggers the actual build comparison to execute. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FinishBuildWithHttpInfo (string buildID);
        /// <summary>
        /// Get results for a build
        /// </summary>
        /// <remarks>
        /// Get the results for a build which has been compared to another build. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>BuildResults</returns>
        BuildResults GetBuildResults (string buildID);

        /// <summary>
        /// Get results for a build
        /// </summary>
        /// <remarks>
        /// Get the results for a build which has been compared to another build. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>ApiResponse of BuildResults</returns>
        ApiResponse<BuildResults> GetBuildResultsWithHttpInfo (string buildID);
        /// <summary>
        /// Get builds for a project
        /// </summary>
        /// <remarks>
        /// Get a list of all the builds for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Builds</returns>
        Builds GetBuilds (string projectID);

        /// <summary>
        /// Get builds for a project
        /// </summary>
        /// <remarks>
        /// Get a list of all the builds for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>ApiResponse of Builds</returns>
        ApiResponse<Builds> GetBuildsWithHttpInfo (string projectID);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a build
        /// </summary>
        /// <remarks>
        /// Create a new build for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Task of Build</returns>
        System.Threading.Tasks.Task<Build> CreateBuildAsync (string projectID, Body2 body);

        /// <summary>
        /// Create a build
        /// </summary>
        /// <remarks>
        /// Create a new build for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Build)</returns>
        System.Threading.Tasks.Task<ApiResponse<Build>> CreateBuildAsyncWithHttpInfo (string projectID, Body2 body);
        /// <summary>
        /// Finish a build
        /// </summary>
        /// <remarks>
        /// Finish a build when all images have been created. This triggers the actual build comparison to execute. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FinishBuildAsync (string buildID);

        /// <summary>
        /// Finish a build
        /// </summary>
        /// <remarks>
        /// Finish a build when all images have been created. This triggers the actual build comparison to execute. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FinishBuildAsyncWithHttpInfo (string buildID);
        /// <summary>
        /// Get results for a build
        /// </summary>
        /// <remarks>
        /// Get the results for a build which has been compared to another build. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of BuildResults</returns>
        System.Threading.Tasks.Task<BuildResults> GetBuildResultsAsync (string buildID);

        /// <summary>
        /// Get results for a build
        /// </summary>
        /// <remarks>
        /// Get the results for a build which has been compared to another build. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of ApiResponse (BuildResults)</returns>
        System.Threading.Tasks.Task<ApiResponse<BuildResults>> GetBuildResultsAsyncWithHttpInfo (string buildID);
        /// <summary>
        /// Get builds for a project
        /// </summary>
        /// <remarks>
        /// Get a list of all the builds for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Task of Builds</returns>
        System.Threading.Tasks.Task<Builds> GetBuildsAsync (string projectID);

        /// <summary>
        /// Get builds for a project
        /// </summary>
        /// <remarks>
        /// Get a list of all the builds for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Task of ApiResponse (Builds)</returns>
        System.Threading.Tasks.Task<ApiResponse<Builds>> GetBuildsAsyncWithHttpInfo (string projectID);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BuildsApi : IBuildsApi
    {
        private VisWiz.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BuildsApi(String basePath)
        {
            this.Configuration = new VisWiz.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = VisWiz.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BuildsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BuildsApi(VisWiz.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = VisWiz.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VisWiz.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VisWiz.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VisWiz.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a build Create a new build for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Build</returns>
        public Build CreateBuild (string projectID, Body2 body)
        {
             ApiResponse<Build> localVarResponse = CreateBuildWithHttpInfo(projectID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a build Create a new build for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Build</returns>
        public ApiResponse< Build > CreateBuildWithHttpInfo (string projectID, Body2 body)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling BuildsApi->CreateBuild");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BuildsApi->CreateBuild");

            var localVarPath = "/projects/{projectID}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", this.Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Build>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Build) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Build)));
        }

        /// <summary>
        /// Create a build Create a new build for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Task of Build</returns>
        public async System.Threading.Tasks.Task<Build> CreateBuildAsync (string projectID, Body2 body)
        {
             ApiResponse<Build> localVarResponse = await CreateBuildAsyncWithHttpInfo(projectID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a build Create a new build for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Build)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Build>> CreateBuildAsyncWithHttpInfo (string projectID, Body2 body)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling BuildsApi->CreateBuild");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling BuildsApi->CreateBuild");

            var localVarPath = "/projects/{projectID}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", this.Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Build>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Build) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Build)));
        }

        /// <summary>
        /// Finish a build Finish a build when all images have been created. This triggers the actual build comparison to execute. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns></returns>
        public void FinishBuild (string buildID)
        {
             FinishBuildWithHttpInfo(buildID);
        }

        /// <summary>
        /// Finish a build Finish a build when all images have been created. This triggers the actual build comparison to execute. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> FinishBuildWithHttpInfo (string buildID)
        {
            // verify the required parameter 'buildID' is set
            if (buildID == null)
                throw new ApiException(400, "Missing required parameter 'buildID' when calling BuildsApi->FinishBuild");

            var localVarPath = "/builds/{buildID}/finish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildID != null) localVarPathParams.Add("buildID", this.Configuration.ApiClient.ParameterToString(buildID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinishBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Finish a build Finish a build when all images have been created. This triggers the actual build comparison to execute. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FinishBuildAsync (string buildID)
        {
             await FinishBuildAsyncWithHttpInfo(buildID);

        }

        /// <summary>
        /// Finish a build Finish a build when all images have been created. This triggers the actual build comparison to execute. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FinishBuildAsyncWithHttpInfo (string buildID)
        {
            // verify the required parameter 'buildID' is set
            if (buildID == null)
                throw new ApiException(400, "Missing required parameter 'buildID' when calling BuildsApi->FinishBuild");

            var localVarPath = "/builds/{buildID}/finish";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildID != null) localVarPathParams.Add("buildID", this.Configuration.ApiClient.ParameterToString(buildID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FinishBuild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        /// Get results for a build Get the results for a build which has been compared to another build. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>BuildResults</returns>
        public BuildResults GetBuildResults (string buildID)
        {
             ApiResponse<BuildResults> localVarResponse = GetBuildResultsWithHttpInfo(buildID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get results for a build Get the results for a build which has been compared to another build. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>ApiResponse of BuildResults</returns>
        public ApiResponse< BuildResults > GetBuildResultsWithHttpInfo (string buildID)
        {
            // verify the required parameter 'buildID' is set
            if (buildID == null)
                throw new ApiException(400, "Missing required parameter 'buildID' when calling BuildsApi->GetBuildResults");

            var localVarPath = "/builds/{buildID}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildID != null) localVarPathParams.Add("buildID", this.Configuration.ApiClient.ParameterToString(buildID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildResults)));
        }

        /// <summary>
        /// Get results for a build Get the results for a build which has been compared to another build. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of BuildResults</returns>
        public async System.Threading.Tasks.Task<BuildResults> GetBuildResultsAsync (string buildID)
        {
             ApiResponse<BuildResults> localVarResponse = await GetBuildResultsAsyncWithHttpInfo(buildID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get results for a build Get the results for a build which has been compared to another build. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="buildID">The requested build ID</param>
        /// <returns>Task of ApiResponse (BuildResults)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<BuildResults>> GetBuildResultsAsyncWithHttpInfo (string buildID)
        {
            // verify the required parameter 'buildID' is set
            if (buildID == null)
                throw new ApiException(400, "Missing required parameter 'buildID' when calling BuildsApi->GetBuildResults");

            var localVarPath = "/builds/{buildID}/results";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (buildID != null) localVarPathParams.Add("buildID", this.Configuration.ApiClient.ParameterToString(buildID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuildResults", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<BuildResults>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (BuildResults) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BuildResults)));
        }

        /// <summary>
        /// Get builds for a project Get a list of all the builds for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Builds</returns>
        public Builds GetBuilds (string projectID)
        {
             ApiResponse<Builds> localVarResponse = GetBuildsWithHttpInfo(projectID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get builds for a project Get a list of all the builds for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>ApiResponse of Builds</returns>
        public ApiResponse< Builds > GetBuildsWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling BuildsApi->GetBuilds");

            var localVarPath = "/projects/{projectID}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", this.Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Builds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Builds) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Builds)));
        }

        /// <summary>
        /// Get builds for a project Get a list of all the builds for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Task of Builds</returns>
        public async System.Threading.Tasks.Task<Builds> GetBuildsAsync (string projectID)
        {
             ApiResponse<Builds> localVarResponse = await GetBuildsAsyncWithHttpInfo(projectID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get builds for a project Get a list of all the builds for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Task of ApiResponse (Builds)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Builds>> GetBuildsAsyncWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling BuildsApi->GetBuilds");

            var localVarPath = "/projects/{projectID}/builds";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", this.Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetBuilds", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Builds>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Builds) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Builds)));
        }

    }
}
