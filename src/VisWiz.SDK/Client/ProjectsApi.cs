/* 
 * VisWiz.io API Documentation
 *
 * This SDK allows you to query and create new projects, builds or images within the VisWiz service. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using VisWiz.SDK.Client;
using VisWiz.SDK.Model;

namespace VisWiz.SDK.Client
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IProjectsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a project
        /// </summary>
        /// <remarks>
        /// Create a new project for the account. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Project</returns>
        Project CreateProject (Body1 body);

        /// <summary>
        /// Create a project
        /// </summary>
        /// <remarks>
        /// Create a new project for the account. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Project</returns>
        ApiResponse<Project> CreateProjectWithHttpInfo (Body1 body);
        /// <summary>
        /// Get notifications settings
        /// </summary>
        /// <remarks>
        /// Get the notifications settings for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Notifications</returns>
        Notifications GetProjectNotifications (string projectID);

        /// <summary>
        /// Get notifications settings
        /// </summary>
        /// <remarks>
        /// Get the notifications settings for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>ApiResponse of Notifications</returns>
        ApiResponse<Notifications> GetProjectNotificationsWithHttpInfo (string projectID);
        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Get a list of all the projects for the account. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 GetProjects ();

        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Get a list of all the projects for the account. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> GetProjectsWithHttpInfo ();
        /// <summary>
        /// Update notifications settings
        /// </summary>
        /// <remarks>
        /// Update the notifications settings for a project. All fields are optional. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Notifications</returns>
        Notifications UpdateProjectNotifications (string projectID, Notifications body);

        /// <summary>
        /// Update notifications settings
        /// </summary>
        /// <remarks>
        /// Update the notifications settings for a project. All fields are optional. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Notifications</returns>
        ApiResponse<Notifications> UpdateProjectNotificationsWithHttpInfo (string projectID, Notifications body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a project
        /// </summary>
        /// <remarks>
        /// Create a new project for the account. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Project</returns>
        System.Threading.Tasks.Task<Project> CreateProjectAsync (Body1 body);

        /// <summary>
        /// Create a project
        /// </summary>
        /// <remarks>
        /// Create a new project for the account. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (Body1 body);
        /// <summary>
        /// Get notifications settings
        /// </summary>
        /// <remarks>
        /// Get the notifications settings for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Task of Notifications</returns>
        System.Threading.Tasks.Task<Notifications> GetProjectNotificationsAsync (string projectID);

        /// <summary>
        /// Get notifications settings
        /// </summary>
        /// <remarks>
        /// Get the notifications settings for a project. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Task of ApiResponse (Notifications)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notifications>> GetProjectNotificationsAsyncWithHttpInfo (string projectID);
        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Get a list of all the projects for the account. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> GetProjectsAsync ();

        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Get a list of all the projects for the account. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetProjectsAsyncWithHttpInfo ();
        /// <summary>
        /// Update notifications settings
        /// </summary>
        /// <remarks>
        /// Update the notifications settings for a project. All fields are optional. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Task of Notifications</returns>
        System.Threading.Tasks.Task<Notifications> UpdateProjectNotificationsAsync (string projectID, Notifications body);

        /// <summary>
        /// Update notifications settings
        /// </summary>
        /// <remarks>
        /// Update the notifications settings for a project. All fields are optional. 
        /// </remarks>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Notifications)</returns>
        System.Threading.Tasks.Task<ApiResponse<Notifications>> UpdateProjectNotificationsAsyncWithHttpInfo (string projectID, Notifications body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ProjectsApi : IProjectsApi
    {
        private VisWiz.SDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ProjectsApi(String basePath)
        {
            this.Configuration = new VisWiz.SDK.Client.Configuration { BasePath = basePath };

            ExceptionFactory = VisWiz.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ProjectsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ProjectsApi(VisWiz.SDK.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = VisWiz.SDK.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = VisWiz.SDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public VisWiz.SDK.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public VisWiz.SDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a project Create a new project for the account. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Project</returns>
        public Project CreateProject (Body1 body)
        {
             ApiResponse<Project> localVarResponse = CreateProjectWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a project Create a new project for the account. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Project</returns>
        public ApiResponse< Project > CreateProjectWithHttpInfo (Body1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsApi->CreateProject");

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Project) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Create a project Create a new project for the account. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Project</returns>
        public async System.Threading.Tasks.Task<Project> CreateProjectAsync (Body1 body)
        {
             ApiResponse<Project> localVarResponse = await CreateProjectAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a project Create a new project for the account. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Project)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Project>> CreateProjectAsyncWithHttpInfo (Body1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsApi->CreateProject");

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateProject", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Project>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Project) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Project)));
        }

        /// <summary>
        /// Get notifications settings Get the notifications settings for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Notifications</returns>
        public Notifications GetProjectNotifications (string projectID)
        {
             ApiResponse<Notifications> localVarResponse = GetProjectNotificationsWithHttpInfo(projectID);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get notifications settings Get the notifications settings for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>ApiResponse of Notifications</returns>
        public ApiResponse< Notifications > GetProjectNotificationsWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling ProjectsApi->GetProjectNotifications");

            var localVarPath = "/projects/{projectID}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", this.Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notifications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notifications) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notifications)));
        }

        /// <summary>
        /// Get notifications settings Get the notifications settings for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Task of Notifications</returns>
        public async System.Threading.Tasks.Task<Notifications> GetProjectNotificationsAsync (string projectID)
        {
             ApiResponse<Notifications> localVarResponse = await GetProjectNotificationsAsyncWithHttpInfo(projectID);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get notifications settings Get the notifications settings for a project. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <returns>Task of ApiResponse (Notifications)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notifications>> GetProjectNotificationsAsyncWithHttpInfo (string projectID)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling ProjectsApi->GetProjectNotifications");

            var localVarPath = "/projects/{projectID}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", this.Configuration.ApiClient.ParameterToString(projectID)); // path parameter

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjectNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notifications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notifications) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notifications)));
        }

        /// <summary>
        /// Get all projects Get a list of all the projects for the account. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 GetProjects ()
        {
             ApiResponse<InlineResponse2002> localVarResponse = GetProjectsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all projects Get a list of all the projects for the account. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse< InlineResponse2002 > GetProjectsWithHttpInfo ()
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Get all projects Get a list of all the projects for the account. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> GetProjectsAsync ()
        {
             ApiResponse<InlineResponse2002> localVarResponse = await GetProjectsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all projects Get a list of all the projects for the account. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> GetProjectsAsyncWithHttpInfo ()
        {

            var localVarPath = "/projects";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProjects", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2002>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2002) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2002)));
        }

        /// <summary>
        /// Update notifications settings Update the notifications settings for a project. All fields are optional. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Notifications</returns>
        public Notifications UpdateProjectNotifications (string projectID, Notifications body)
        {
             ApiResponse<Notifications> localVarResponse = UpdateProjectNotificationsWithHttpInfo(projectID, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update notifications settings Update the notifications settings for a project. All fields are optional. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Notifications</returns>
        public ApiResponse< Notifications > UpdateProjectNotificationsWithHttpInfo (string projectID, Notifications body)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling ProjectsApi->UpdateProjectNotifications");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsApi->UpdateProjectNotifications");

            var localVarPath = "/projects/{projectID}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", this.Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProjectNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notifications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notifications) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notifications)));
        }

        /// <summary>
        /// Update notifications settings Update the notifications settings for a project. All fields are optional. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Task of Notifications</returns>
        public async System.Threading.Tasks.Task<Notifications> UpdateProjectNotificationsAsync (string projectID, Notifications body)
        {
             ApiResponse<Notifications> localVarResponse = await UpdateProjectNotificationsAsyncWithHttpInfo(projectID, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update notifications settings Update the notifications settings for a project. All fields are optional. 
        /// </summary>
        /// <exception cref="VisWiz.SDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="projectID">The requested project ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Notifications)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Notifications>> UpdateProjectNotificationsAsyncWithHttpInfo (string projectID, Notifications body)
        {
            // verify the required parameter 'projectID' is set
            if (projectID == null)
                throw new ApiException(400, "Missing required parameter 'projectID' when calling ProjectsApi->UpdateProjectNotifications");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling ProjectsApi->UpdateProjectNotifications");

            var localVarPath = "/projects/{projectID}/notifications";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (projectID != null) localVarPathParams.Add("projectID", this.Configuration.ApiClient.ParameterToString(projectID)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (api_key) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateProjectNotifications", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Notifications>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Notifications) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Notifications)));
        }

    }
}
