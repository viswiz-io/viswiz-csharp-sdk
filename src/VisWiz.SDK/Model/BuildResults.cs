/* 
 * VisWiz.io API Documentation
 *
 * This SDK allows you to query and create new projects, builds or images within the VisWiz service. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VisWiz.SDK.Client.SwaggerDateConverter;

namespace VisWiz.SDK.Model
{
    /// <summary>
    /// The results of a build comparison
    /// </summary>
    [DataContract]
    public partial class BuildResults :  IEquatable<BuildResults>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildResults" /> class.
        /// </summary>
        /// <param name="build">build.</param>
        /// <param name="comparisonBuild">comparisonBuild.</param>
        /// <param name="images">The list of images resulted from the comparison (both identical and different).</param>
        public BuildResults(Build build = default(Build), Build comparisonBuild = default(Build), List<BuildResultsImages> images = default(List<BuildResultsImages>))
        {
            this.Build = build;
            this.ComparisonBuild = comparisonBuild;
            this.Images = images;
        }
        
        /// <summary>
        /// Gets or Sets Build
        /// </summary>
        [DataMember(Name="build", EmitDefaultValue=false)]
        public Build Build { get; set; }

        /// <summary>
        /// Gets or Sets ComparisonBuild
        /// </summary>
        [DataMember(Name="comparisonBuild", EmitDefaultValue=false)]
        public Build ComparisonBuild { get; set; }

        /// <summary>
        /// The list of images resulted from the comparison (both identical and different)
        /// </summary>
        /// <value>The list of images resulted from the comparison (both identical and different)</value>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<BuildResultsImages> Images { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildResults {\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("  ComparisonBuild: ").Append(ComparisonBuild).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildResults);
        }

        /// <summary>
        /// Returns true if BuildResults instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildResults input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Build == input.Build ||
                    (this.Build != null &&
                    this.Build.Equals(input.Build))
                ) && 
                (
                    this.ComparisonBuild == input.ComparisonBuild ||
                    (this.ComparisonBuild != null &&
                    this.ComparisonBuild.Equals(input.ComparisonBuild))
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Build != null)
                    hashCode = hashCode * 59 + this.Build.GetHashCode();
                if (this.ComparisonBuild != null)
                    hashCode = hashCode * 59 + this.ComparisonBuild.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
