/* 
 * VisWiz.io API Documentation
 *
 * This SDK allows you to query and create new projects, builds or images within the VisWiz service. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VisWiz.SDK.Client.SwaggerDateConverter;

namespace VisWiz.SDK.Model
{
    /// <summary>
    /// Body2
    /// </summary>
    [DataContract]
    public partial class Body2 :  IEquatable<Body2>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Body2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Body2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Body2" /> class.
        /// </summary>
        /// <param name="branch">The branch which contains the build (required).</param>
        /// <param name="name">The name (commit title) of the build (required).</param>
        /// <param name="revision">The revision of the build (required).</param>
        public Body2(string branch = default(string), string name = default(string), string revision = default(string))
        {
            // to ensure "branch" is required (not null)
            if (branch == null)
            {
                throw new InvalidDataException("branch is a required property for Body2 and cannot be null");
            }
            else
            {
                this.Branch = branch;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Body2 and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "revision" is required (not null)
            if (revision == null)
            {
                throw new InvalidDataException("revision is a required property for Body2 and cannot be null");
            }
            else
            {
                this.Revision = revision;
            }
        }
        
        /// <summary>
        /// The branch which contains the build
        /// </summary>
        /// <value>The branch which contains the build</value>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// The name (commit title) of the build
        /// </summary>
        /// <value>The name (commit title) of the build</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The revision of the build
        /// </summary>
        /// <value>The revision of the build</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public string Revision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Body2 {\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Body2);
        }

        /// <summary>
        /// Returns true if Body2 instances are equal
        /// </summary>
        /// <param name="input">Instance of Body2 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Body2 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
