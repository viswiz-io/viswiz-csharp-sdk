/* 
 * VisWiz.io API Documentation
 *
 * This SDK allows you to query and create new projects, builds or images within the VisWiz service. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VisWiz.SDK.Client.SwaggerDateConverter;

namespace VisWiz.SDK.Model
{
    /// <summary>
    /// BuildResultsImages
    /// </summary>
    [DataContract]
    public partial class BuildResultsImages :  IEquatable<BuildResultsImages>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BuildResultsImages" /> class.
        /// </summary>
        /// <param name="comparison">comparison.</param>
        /// <param name="diff">diff.</param>
        /// <param name="source">source.</param>
        public BuildResultsImages(Image comparison = default(Image), DiffImage diff = default(DiffImage), Image source = default(Image))
        {
            this.Comparison = comparison;
            this.Diff = diff;
            this.Source = source;
        }
        
        /// <summary>
        /// Gets or Sets Comparison
        /// </summary>
        [DataMember(Name="comparison", EmitDefaultValue=false)]
        public Image Comparison { get; set; }

        /// <summary>
        /// Gets or Sets Diff
        /// </summary>
        [DataMember(Name="diff", EmitDefaultValue=false)]
        public DiffImage Diff { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public Image Source { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildResultsImages {\n");
            sb.Append("  Comparison: ").Append(Comparison).Append("\n");
            sb.Append("  Diff: ").Append(Diff).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BuildResultsImages);
        }

        /// <summary>
        /// Returns true if BuildResultsImages instances are equal
        /// </summary>
        /// <param name="input">Instance of BuildResultsImages to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildResultsImages input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Comparison == input.Comparison ||
                    (this.Comparison != null &&
                    this.Comparison.Equals(input.Comparison))
                ) && 
                (
                    this.Diff == input.Diff ||
                    (this.Diff != null &&
                    this.Diff.Equals(input.Diff))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Comparison != null)
                    hashCode = hashCode * 59 + this.Comparison.GetHashCode();
                if (this.Diff != null)
                    hashCode = hashCode * 59 + this.Diff.GetHashCode();
                if (this.Source != null)
                    hashCode = hashCode * 59 + this.Source.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
