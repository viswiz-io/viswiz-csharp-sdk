/* 
 * VisWiz.io API Documentation
 *
 * This SDK allows you to query and create new projects, builds or images within the VisWiz service. 
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = VisWiz.SDK.Client.SwaggerDateConverter;

namespace VisWiz.SDK.Model
{
    /// <summary>
    /// Build
    /// </summary>
    [DataContract]
    public partial class Build :  IEquatable<Build>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Build" /> class.
        /// </summary>
        /// <param name="branch">The branch which contains the build.</param>
        /// <param name="comparisonID">The build ID which is used for comparison with the build.</param>
        /// <param name="createdAt">The date and time the build was created.</param>
        /// <param name="diffedAt">The date and time the build was compared.</param>
        /// <param name="diffImagesCount">The number of different images in the build.</param>
        /// <param name="diffPercentage">The difference percentage for the build.</param>
        /// <param name="id">id.</param>
        /// <param name="imagesCount">The total number images in the build.</param>
        /// <param name="name">The name (commit title) for the build.</param>
        /// <param name="projectID">The project ID which owns the build.</param>
        /// <param name="revision">The revision for the build.</param>
        public Build(string branch = default(string), string comparisonID = default(string), DateTime? createdAt = default(DateTime?), DateTime? diffedAt = default(DateTime?), int? diffImagesCount = default(int?), float? diffPercentage = default(float?), string id = default(string), decimal? imagesCount = default(decimal?), string name = default(string), int? projectID = default(int?), string revision = default(string))
        {
            this.Branch = branch;
            this.ComparisonID = comparisonID;
            this.CreatedAt = createdAt;
            this.DiffedAt = diffedAt;
            this.DiffImagesCount = diffImagesCount;
            this.DiffPercentage = diffPercentage;
            this.Id = id;
            this.ImagesCount = imagesCount;
            this.Name = name;
            this.ProjectID = projectID;
            this.Revision = revision;
        }
        
        /// <summary>
        /// The branch which contains the build
        /// </summary>
        /// <value>The branch which contains the build</value>
        [DataMember(Name="branch", EmitDefaultValue=false)]
        public string Branch { get; set; }

        /// <summary>
        /// The build ID which is used for comparison with the build
        /// </summary>
        /// <value>The build ID which is used for comparison with the build</value>
        [DataMember(Name="comparisonID", EmitDefaultValue=false)]
        public string ComparisonID { get; set; }

        /// <summary>
        /// The date and time the build was created
        /// </summary>
        /// <value>The date and time the build was created</value>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// The date and time the build was compared
        /// </summary>
        /// <value>The date and time the build was compared</value>
        [DataMember(Name="diffedAt", EmitDefaultValue=false)]
        public DateTime? DiffedAt { get; set; }

        /// <summary>
        /// The number of different images in the build
        /// </summary>
        /// <value>The number of different images in the build</value>
        [DataMember(Name="diffImagesCount", EmitDefaultValue=false)]
        public int? DiffImagesCount { get; set; }

        /// <summary>
        /// The difference percentage for the build
        /// </summary>
        /// <value>The difference percentage for the build</value>
        [DataMember(Name="diffPercentage", EmitDefaultValue=false)]
        public float? DiffPercentage { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The total number images in the build
        /// </summary>
        /// <value>The total number images in the build</value>
        [DataMember(Name="imagesCount", EmitDefaultValue=false)]
        public decimal? ImagesCount { get; set; }

        /// <summary>
        /// The name (commit title) for the build
        /// </summary>
        /// <value>The name (commit title) for the build</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The project ID which owns the build
        /// </summary>
        /// <value>The project ID which owns the build</value>
        [DataMember(Name="projectID", EmitDefaultValue=false)]
        public int? ProjectID { get; set; }

        /// <summary>
        /// The revision for the build
        /// </summary>
        /// <value>The revision for the build</value>
        [DataMember(Name="revision", EmitDefaultValue=false)]
        public string Revision { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Build {\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  ComparisonID: ").Append(ComparisonID).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DiffedAt: ").Append(DiffedAt).Append("\n");
            sb.Append("  DiffImagesCount: ").Append(DiffImagesCount).Append("\n");
            sb.Append("  DiffPercentage: ").Append(DiffPercentage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImagesCount: ").Append(ImagesCount).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
            sb.Append("  Revision: ").Append(Revision).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Build);
        }

        /// <summary>
        /// Returns true if Build instances are equal
        /// </summary>
        /// <param name="input">Instance of Build to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Build input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.ComparisonID == input.ComparisonID ||
                    (this.ComparisonID != null &&
                    this.ComparisonID.Equals(input.ComparisonID))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DiffedAt == input.DiffedAt ||
                    (this.DiffedAt != null &&
                    this.DiffedAt.Equals(input.DiffedAt))
                ) && 
                (
                    this.DiffImagesCount == input.DiffImagesCount ||
                    (this.DiffImagesCount != null &&
                    this.DiffImagesCount.Equals(input.DiffImagesCount))
                ) && 
                (
                    this.DiffPercentage == input.DiffPercentage ||
                    (this.DiffPercentage != null &&
                    this.DiffPercentage.Equals(input.DiffPercentage))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.ImagesCount == input.ImagesCount ||
                    (this.ImagesCount != null &&
                    this.ImagesCount.Equals(input.ImagesCount))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.ProjectID == input.ProjectID ||
                    (this.ProjectID != null &&
                    this.ProjectID.Equals(input.ProjectID))
                ) && 
                (
                    this.Revision == input.Revision ||
                    (this.Revision != null &&
                    this.Revision.Equals(input.Revision))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Branch != null)
                    hashCode = hashCode * 59 + this.Branch.GetHashCode();
                if (this.ComparisonID != null)
                    hashCode = hashCode * 59 + this.ComparisonID.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DiffedAt != null)
                    hashCode = hashCode * 59 + this.DiffedAt.GetHashCode();
                if (this.DiffImagesCount != null)
                    hashCode = hashCode * 59 + this.DiffImagesCount.GetHashCode();
                if (this.DiffPercentage != null)
                    hashCode = hashCode * 59 + this.DiffPercentage.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.ImagesCount != null)
                    hashCode = hashCode * 59 + this.ImagesCount.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ProjectID != null)
                    hashCode = hashCode * 59 + this.ProjectID.GetHashCode();
                if (this.Revision != null)
                    hashCode = hashCode * 59 + this.Revision.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
